/*
 * MonitorGUI.java
 *
 * Created on April 30, 2007, 3:36 PM
 */

package FalkonMonitor;
import java.util.*;

/**
 *
 * @author  iraicu
 */
public class MonitorGUI extends javax.swing.JFrame {
    
    /** Creates new form MonitorGUI */
    public MonitorGUI() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        resourcePane = new javax.swing.JDesktopPane();
        jLabel7 = new javax.swing.JLabel();
        allocatedExecutors = new javax.swing.JTextField();
        registeredExecutors = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        freeExecutors = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        pendingExecutors = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        activeExecutors = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        generalPane = new javax.swing.JDesktopPane();
        exitButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        machName = new javax.swing.JTextField();
        machPort = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        securityCheckBox = new javax.swing.JCheckBox();
        statusText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        pollingInterval = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        configPane = new javax.swing.JDesktopPane();
        bundling = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        piggyBacking = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        preFetching = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        drpMinResc = new javax.swing.JTextField();
        drpMaxResc = new javax.swing.JTextField();
        drpMinTime = new javax.swing.JTextField();
        drpMaxTime = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        dataCaching = new javax.swing.JTextField();
        scheduler = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        tasksPane = new javax.swing.JDesktopPane();
        numQueues = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        waitQlength = new javax.swing.JTextField();
        activeTasks = new javax.swing.JTextField();
        deliverQtasks = new javax.swing.JTextField();
        deliveredTasks = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        perfPane = new javax.swing.JDesktopPane();
        submitTP = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        dispatchTP = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        deliveredTP = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        systemPane = new javax.swing.JDesktopPane();
        numThreads = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        cpuUtilization = new javax.swing.JTextField();
        heapFree = new javax.swing.JTextField();
        heapMax = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 24));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Falkon Monitor v0.9");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 12));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("http://people.cs.uchicago.edu/~iraicu/research/Falkon/");

        resourcePane.setBackground(new java.awt.Color(0, 153, 255));
        jLabel7.setText("Allocated");
        jLabel7.setBounds(20, 30, 100, 14);
        resourcePane.add(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        allocatedExecutors.setEditable(false);
        allocatedExecutors.setBounds(10, 50, 100, 20);
        resourcePane.add(allocatedExecutors, javax.swing.JLayeredPane.DEFAULT_LAYER);

        registeredExecutors.setEditable(false);
        registeredExecutors.setBounds(130, 50, 100, 20);
        resourcePane.add(registeredExecutors, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel6.setText("Registered");
        jLabel6.setBounds(130, 30, 110, 14);
        resourcePane.add(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        freeExecutors.setEditable(false);
        freeExecutors.setBounds(240, 50, 100, 20);
        resourcePane.add(freeExecutors, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel8.setText("Free");
        jLabel8.setBounds(240, 30, 34, 14);
        resourcePane.add(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        pendingExecutors.setEditable(false);
        pendingExecutors.setBounds(350, 50, 100, 20);
        resourcePane.add(pendingExecutors, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel9.setText("Resources");
        jLabel9.setBounds(0, 0, 210, 22);
        resourcePane.add(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel10.setText("Pending");
        jLabel10.setBounds(350, 30, 38, 14);
        resourcePane.add(jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        activeExecutors.setEditable(false);
        activeExecutors.setBounds(460, 50, 100, 20);
        resourcePane.add(activeExecutors, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel12.setText("Active");
        jLabel12.setBounds(460, 30, 30, 14);
        resourcePane.add(jLabel12, javax.swing.JLayeredPane.DEFAULT_LAYER);

        generalPane.setBackground(new java.awt.Color(153, 153, 153));
        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        exitButton.setBounds(110, 30, 100, 23);
        generalPane.add(exitButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        connectButton.setBounds(10, 30, 100, 23);
        generalPane.add(connectButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setText("Falkon Address");
        jLabel1.setBounds(220, 10, 130, 14);
        generalPane.add(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        machName.setText("viper.uchicago.edu");
        machName.setBounds(216, 30, 200, 20);
        generalPane.add(machName, javax.swing.JLayeredPane.DEFAULT_LAYER);

        machPort.setText("50001");
        machPort.setBounds(430, 30, 100, 20);
        generalPane.add(machPort, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setText("Falkon Port");
        jLabel2.setBounds(430, 10, 80, 14);
        generalPane.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        securityCheckBox.setText("Security");
        securityCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        securityCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        securityCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                securityCheckBoxActionPerformed(evt);
            }
        });

        securityCheckBox.setBounds(540, 30, 80, 20);
        generalPane.add(securityCheckBox, javax.swing.JLayeredPane.DEFAULT_LAYER);

        statusText.setEditable(false);
        statusText.setFont(new java.awt.Font("Tahoma", 0, 10));
        statusText.setBounds(10, 80, 1040, 20);
        generalPane.add(statusText, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setText("Status");
        jLabel3.setBounds(10, 60, 110, 14);
        generalPane.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        pollingInterval.setText("1000");
        pollingInterval.setBounds(630, 30, 100, 20);
        generalPane.add(pollingInterval, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel11.setText("Polling Interval (ms)");
        jLabel11.setBounds(630, 10, 130, 14);
        generalPane.add(jLabel11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        configPane.setBackground(new java.awt.Color(153, 153, 153));
        bundling.setEditable(false);
        bundling.setBounds(10, 50, 100, 20);
        configPane.add(bundling, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel13.setText("Falkon Configuration");
        jLabel13.setBounds(0, 0, 200, 22);
        configPane.add(jLabel13, javax.swing.JLayeredPane.DEFAULT_LAYER);

        piggyBacking.setEditable(false);
        piggyBacking.setBounds(120, 50, 100, 20);
        configPane.add(piggyBacking, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel14.setText("Max Bundling");
        jLabel14.setBounds(10, 30, 100, 14);
        configPane.add(jLabel14, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel15.setText("Piggy-Backing");
        jLabel15.setBounds(120, 30, 100, 14);
        configPane.add(jLabel15, javax.swing.JLayeredPane.DEFAULT_LAYER);

        preFetching.setEditable(false);
        preFetching.setBounds(230, 50, 100, 20);
        configPane.add(preFetching, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel16.setText("Pre-Fetching");
        jLabel16.setBounds(230, 30, 100, 14);
        configPane.add(jLabel16, javax.swing.JLayeredPane.DEFAULT_LAYER);

        drpMinResc.setEditable(false);
        drpMinResc.setBounds(340, 50, 100, 20);
        configPane.add(drpMinResc, javax.swing.JLayeredPane.DEFAULT_LAYER);

        drpMaxResc.setEditable(false);
        drpMaxResc.setBounds(450, 50, 100, 20);
        configPane.add(drpMaxResc, javax.swing.JLayeredPane.DEFAULT_LAYER);

        drpMinTime.setEditable(false);
        drpMinTime.setBounds(560, 50, 120, 20);
        configPane.add(drpMinTime, javax.swing.JLayeredPane.DEFAULT_LAYER);

        drpMaxTime.setEditable(false);
        drpMaxTime.setBounds(700, 50, 120, 20);
        configPane.add(drpMaxTime, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel17.setText("DRP Min Resc");
        jLabel17.setBounds(340, 30, 100, 14);
        configPane.add(jLabel17, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel18.setText("DRP Max Resc");
        jLabel18.setBounds(450, 30, 100, 14);
        configPane.add(jLabel18, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel19.setText("DRP Min Time (min)");
        jLabel19.setBounds(560, 30, 130, 14);
        configPane.add(jLabel19, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel20.setText("DRP Max Time (min)");
        jLabel20.setBounds(700, 30, 130, 14);
        configPane.add(jLabel20, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dataCaching.setEditable(false);
        dataCaching.setBounds(840, 50, 100, 20);
        configPane.add(dataCaching, javax.swing.JLayeredPane.DEFAULT_LAYER);

        scheduler.setEditable(false);
        scheduler.setBounds(950, 50, 100, 20);
        configPane.add(scheduler, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel21.setText("Data Caching");
        jLabel21.setBounds(840, 30, 100, 14);
        configPane.add(jLabel21, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel22.setText("Scheduler");
        jLabel22.setBounds(950, 30, 100, 14);
        configPane.add(jLabel22, javax.swing.JLayeredPane.DEFAULT_LAYER);

        tasksPane.setBackground(new java.awt.Color(0, 153, 255));
        numQueues.setEditable(false);
        numQueues.setBounds(10, 50, 100, 20);
        tasksPane.add(numQueues, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel23.setText("Tasks");
        jLabel23.setBounds(0, 0, 90, 22);
        tasksPane.add(jLabel23, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel24.setText("# of Queues");
        jLabel24.setBounds(10, 30, 100, 14);
        tasksPane.add(jLabel24, javax.swing.JLayeredPane.DEFAULT_LAYER);

        waitQlength.setEditable(false);
        waitQlength.setBounds(120, 50, 100, 20);
        tasksPane.add(waitQlength, javax.swing.JLayeredPane.DEFAULT_LAYER);

        activeTasks.setEditable(false);
        activeTasks.setBounds(230, 50, 100, 20);
        tasksPane.add(activeTasks, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deliverQtasks.setEditable(false);
        deliverQtasks.setBounds(340, 50, 100, 20);
        tasksPane.add(deliverQtasks, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deliveredTasks.setEditable(false);
        deliveredTasks.setBounds(450, 50, 100, 20);
        tasksPane.add(deliveredTasks, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel25.setText("Wait Queue");
        jLabel25.setBounds(120, 30, 100, 14);
        tasksPane.add(jLabel25, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel26.setText("Active Tasks");
        jLabel26.setBounds(230, 30, 100, 14);
        tasksPane.add(jLabel26, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel27.setText("Delivery Queue");
        jLabel27.setBounds(340, 30, 100, 14);
        tasksPane.add(jLabel27, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel28.setText("Delivered Tasks");
        jLabel28.setBounds(450, 30, 100, 14);
        tasksPane.add(jLabel28, javax.swing.JLayeredPane.DEFAULT_LAYER);

        perfPane.setBackground(new java.awt.Color(0, 153, 255));
        submitTP.setEditable(false);
        submitTP.setBounds(10, 50, 100, 20);
        perfPane.add(submitTP, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel29.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel29.setText("Performance: Thoughput (tasks/sec)");
        jLabel29.setBounds(0, 0, 350, 22);
        perfPane.add(jLabel29, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel31.setText("Submit");
        jLabel31.setBounds(10, 30, 100, 14);
        perfPane.add(jLabel31, javax.swing.JLayeredPane.DEFAULT_LAYER);

        dispatchTP.setEditable(false);
        dispatchTP.setBounds(120, 50, 100, 20);
        perfPane.add(dispatchTP, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel32.setText("Dispatch");
        jLabel32.setBounds(120, 30, 100, 14);
        perfPane.add(jLabel32, javax.swing.JLayeredPane.DEFAULT_LAYER);

        deliveredTP.setEditable(false);
        deliveredTP.setBounds(230, 50, 100, 20);
        perfPane.add(deliveredTP, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel33.setText("Deliver");
        jLabel33.setBounds(230, 30, 100, 14);
        perfPane.add(jLabel33, javax.swing.JLayeredPane.DEFAULT_LAYER);

        systemPane.setBackground(new java.awt.Color(102, 255, 102));
        numThreads.setEditable(false);
        numThreads.setBounds(10, 50, 100, 20);
        systemPane.add(numThreads, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel30.setFont(new java.awt.Font("Tahoma", 1, 18));
        jLabel30.setText("System");
        jLabel30.setBounds(0, 0, 80, 22);
        systemPane.add(jLabel30, javax.swing.JLayeredPane.DEFAULT_LAYER);

        cpuUtilization.setEditable(false);
        cpuUtilization.setBounds(120, 50, 100, 20);
        systemPane.add(cpuUtilization, javax.swing.JLayeredPane.DEFAULT_LAYER);

        heapFree.setEditable(false);
        heapFree.setBounds(230, 50, 100, 20);
        systemPane.add(heapFree, javax.swing.JLayeredPane.DEFAULT_LAYER);

        heapMax.setEditable(false);
        heapMax.setBounds(340, 50, 100, 20);
        systemPane.add(heapMax, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel34.setText("# of Threads");
        jLabel34.setBounds(10, 30, 100, 14);
        systemPane.add(jLabel34, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel35.setText("CPU %");
        jLabel35.setBounds(120, 30, 100, 14);
        systemPane.add(jLabel35, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel36.setText("Heap Free (MB)");
        jLabel36.setBounds(230, 30, 100, 14);
        systemPane.add(jLabel36, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel37.setText("Max Heap Size (MB)");
        jLabel37.setBounds(340, 30, 130, 14);
        systemPane.add(jLabel37, javax.swing.JLayeredPane.DEFAULT_LAYER);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, systemPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .add(perfPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .add(tasksPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .add(resourcePane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .add(configPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .add(jLabel5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .add(jLabel4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE)
                    .add(generalPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 1061, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel5)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 17, Short.MAX_VALUE)
                .add(generalPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 112, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(14, 14, 14)
                .add(configPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(resourcePane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 83, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(16, 16, 16)
                .add(tasksPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 80, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17)
                .add(perfPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 81, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(16, 16, 16)
                .add(systemPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 84, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void securityCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_securityCheckBoxActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_securityCheckBoxActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
// TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    public String isSecure()
    {
        if (securityCheckBox.isSelected())
            return "enabled";
        else
            return "disabled";
    }
    
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
// TODO add your handling code here:
        Calendar cal = new GregorianCalendar();
        statusText.setText("[" + cal.getTime() + "] Connecting to " + machName.getText() + " on port " + machPort.getText() + " with security " + isSecure() + "...");
        
        if (connectToFalkon())
        {
        
    int delay = 1000;   // delay for 5 sec.
    int period = 1000;  // repeat every sec.
    Timer timer = new Timer();
    
    timer.scheduleAtFixedRate(new TimerTask() {
            public void run() {
                runMonitor();
                // Task here ...
            }
        }, delay, period);
        }
        else
        {
        cal = new GregorianCalendar();
        statusText.setText("[" + cal.getTime() + "] Failed to connect to " + machName.getText() + " on port " + machPort.getText() + " with security " + isSecure() + "... exiting!");
            
        try
        {
            Thread.sleep(5000);
        }
        catch (Exception e)
        {
        }
        System.exit(0);
        }
            
            
        
        
        
    }//GEN-LAST:event_connectButtonActionPerformed

    public void runMonitor()
    {
            
        updateStatus();
        updateConfig();
        updateResources();
        updateTasks();
        updatePerformance();
        updateSystem();
    }

    
    public boolean connectToFalkon()
    {
        return true;
        
    }
    
    public void updateStatus()
    {
            try
            {
                Calendar cal = new GregorianCalendar();
                statusText.setText("[" + cal.getTime() + "] Connected to " + machName.getText() + " on port " + machPort.getText() + " with security " + isSecure() + "... polling every " + pollingInterval.getText() + " ms");
                //Thread.sleep(Integer.parseInt(pollingInterval.getText()));
            }
            catch (Exception e)
            {
                
            }
        
    }
    
    public void updateConfig()
    {
                bundling.setText("disabled");
                piggyBacking.setText("disabled");
                preFetching.setText("disabled");
                drpMinResc.setText("0");
                drpMaxResc.setText("0");
                drpMinTime.setText("0");
                drpMaxTime.setText("0");
                dataCaching.setText("disabled");
                scheduler.setText("disabled");
    }

    public void updateResources()
    {
        allocatedExecutors.setText("0");
        registeredExecutors.setText("0");
        freeExecutors.setText("0");
        pendingExecutors.setText("0");
        activeExecutors.setText("0");
    }
    
        public void updateTasks()
        {
            numQueues.setText("0");
            waitQlength.setText("0");
            activeTasks.setText("0");
            deliverQtasks.setText("0");
            deliveredTasks.setText("0");
        }
        public void updatePerformance()
        {
            submitTP.setText("0.0");
            dispatchTP.setText("0.0");
            deliveredTP.setText("0.0");
        }
        public void updateSystem()
        {
            numThreads.setText("0");
            cpuUtilization.setText("0.0%");
            heapFree.setText("0 MB");
            heapMax.setText("0 MB");
        }

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MonitorGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField activeExecutors;
    private javax.swing.JTextField activeTasks;
    private javax.swing.JTextField allocatedExecutors;
    private javax.swing.JTextField bundling;
    private javax.swing.JDesktopPane configPane;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField cpuUtilization;
    private javax.swing.JTextField dataCaching;
    private javax.swing.JTextField deliverQtasks;
    private javax.swing.JTextField deliveredTP;
    private javax.swing.JTextField deliveredTasks;
    private javax.swing.JTextField dispatchTP;
    private javax.swing.JTextField drpMaxResc;
    private javax.swing.JTextField drpMaxTime;
    private javax.swing.JTextField drpMinResc;
    private javax.swing.JTextField drpMinTime;
    private javax.swing.JButton exitButton;
    private javax.swing.JTextField freeExecutors;
    private javax.swing.JDesktopPane generalPane;
    private javax.swing.JTextField heapFree;
    private javax.swing.JTextField heapMax;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField machName;
    private javax.swing.JTextField machPort;
    private javax.swing.JTextField numQueues;
    private javax.swing.JTextField numThreads;
    private javax.swing.JTextField pendingExecutors;
    private javax.swing.JDesktopPane perfPane;
    private javax.swing.JTextField piggyBacking;
    private javax.swing.JTextField pollingInterval;
    private javax.swing.JTextField preFetching;
    private javax.swing.JTextField registeredExecutors;
    private javax.swing.JDesktopPane resourcePane;
    private javax.swing.JTextField scheduler;
    private javax.swing.JCheckBox securityCheckBox;
    private javax.swing.JTextField statusText;
    private javax.swing.JTextField submitTP;
    private javax.swing.JDesktopPane systemPane;
    private javax.swing.JDesktopPane tasksPane;
    private javax.swing.JTextField waitQlength;
    // End of variables declaration//GEN-END:variables
    
}
